@using System.Globalization

@page "/expenses"
@page "/expenses/category/{name}"
@rendermode InteractiveServer

@inject ExpenseService Service
@inject NavigationManager Navigator

@if (@name == null)
{
    <h3>Expenses</h3>
}
else {<h3>@name Expenses</h3>
}
<label for="type">View</label>
<select @bind=@Choice class="form-select" name="type" id="type">
    <option value=0>All</option>
    <option value=1>Planned</option>
    <option value=2>Unplanned</option>
</select>
<br /><br />

<table class="table">
    <thead class="thead-light">
        <tr>
            <th scope="col" >Name</th>
            <th scope="col" @onclick=@SortAmount style="cursor:pointer">Amount</th>
            <th scope="col" >Date</th>
            @if (choice == 0)
            {
                <th scope="col">Planned</th>
            }
            @if (@name == null)
            {
                <th scope="col">Category</th>
            }
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Expense expense in expenses){
            <tr>
                <th scope="row">@expense.Title</th>
                <td>@expense.Amount</td>
                <td>@expense.Date.ToLocalTime()</td>
                @if(choice==0){
                    <td>@expense.Planned</td>
                }
                @if(@name == null){
                    <td>@expense.Category.Name</td>
                }
                <td>
                    <button class="btn btn-primary" @onclick=@(()=>Edit(expense.Id))>Edit</button>
                    <button class="btn btn-danger" @onclick=@(()=>Delete(expense.Id))>Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div style="display:flex;justify-content:space-between;">
<h2>TOTAL : @Total.ToString("C", CultureInfo.CreateSpecificCulture("RO-ro"))</h2>
<button class="btn btn-primary" @onclick=@(()=>@Navigator.NavigateTo("expenses/new"))>Add expense</button>
</div>
@code {
    List<Expense> expenses = new List<Expense>();

    [Parameter]
    public string? name { set; get; }

    public double Total;

    private int choice;
    public int Choice {
        get => choice;
        set
        {
            choice = value;
            UpdateList();  
        }
    }
    private bool sortAmount = false;
    private void SortAmount()
    {
        sortAmount = !sortAmount;
        if (sortAmount == true) expenses = expenses.OrderByDescending(A => A.Amount).ToList();
        else
        {
            if (name == null) expenses = Service.GetExpenseList();
            else expenses = Service.GetExpensesByCategory(name);
        }
    }

    protected override void OnInitialized()
    {
        if (name == null){
            expenses = Service.GetExpenseList();
            Service.OnExpenseChange += (() => expenses = Service.GetExpenseList());
        }
        else{
            expenses = Service.GetExpensesByCategory(name);
            Service.OnExpenseChange += (() => expenses = Service.GetExpensesByCategory(name));
        }
        Total = expenses.Sum(m => m.Amount);
    }
    private void Delete(int id)
    {
        Service.Delete(id);
    }
    private void Edit(int id)
    {
        string url = "/expenses/" + id;
        Navigator.NavigateTo(url);
    }
    private void UpdateList()
    {
        if (choice == 0){
            expenses = Service.GetExpenseList();
        }
        else if (choice == 1){
            expenses = Service.GetExpenseList().Where(a => a.Planned == true).ToList();
        }
        else{
            expenses = Service.GetExpenseList().Where(a => a.Planned == false).ToList();
        }
        if (name != null) expenses = expenses.Where(a => a.Category.Name == name).ToList();
        Total = expenses.Sum(m => m.Amount);
    }
}
